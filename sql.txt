CREATE TABLE `passinglight`.`readers` (
  `readerid` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `username` VARCHAR(64) NOT NULL COMMENT '',
  `firstname` VARCHAR(64)  NULL COMMENT '',
  `lastname` VARCHAR(64)  NULL COMMENT '',
  `middlename` VARCHAR(64) NULL COMMENT '',
  `password` VARCHAR(64) NULL COMMENT '',
  `role` VARCHAR(16) NULL COMMENT '',
  `church` VARCHAR(64) NULL COMMENT '',
  `groups` VARCHAR(64) NULL COMMENT '',
  `email` VARCHAR(64) NULL COMMENT '',
  `phonenumber` VARCHAR(64) NULL COMMENT '',
  `memo` VARCHAR(64) NULL COMMENT '',
  `gender` VARCHAR(64) NULL COMMENT '',
  `birth` VARCHAR(64) NULL COMMENT '',
  `createdAt` VARCHAR(64) NULL COMMENT '',
  `updatedAt` VARCHAR(64) NULL COMMENT '',
  `version` INT NULL COMMENT '',
  PRIMARY KEY (`readerid`)  COMMENT '',
  UNIQUE KEY `username` (`username`),
UNIQUE INDEX `readerid_UNIQUE` (`readerid` ASC)  COMMENT ''
  ) ;
 alter table test.readers AUTO_INCREMENT=61001

  alter table test.readers  
 Add column finishquestion  VARCHAR(8) AFTER `role` 


  CREATE TABLE `passinglight`.`books` (
  `bookid` INT NOT NULL COMMENT '',
  `bookname` VARCHAR(45) NOT NULL COMMENT '',
  `author` VARCHAR(45) NULL COMMENT '',
  `version` VARCHAR(45) NULL COMMENT '',
  `price` VARCHAR(45) NULL COMMENT '',
  `location` VARCHAR(45) NULL COMMENT '',
  PRIMARY KEY (`bookid`)  COMMENT '');

CREATE TABLE `passinglight`.`bookreaders` (
  `bookreaderid` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `bookid` INT NOT NULL COMMENT '',
  `readerid` INT NOT NULL COMMENT '',
  `sequence` INT NOT NULL COMMENT '',
  `startdate` DATE NULL COMMENT '',
  `enddate` DATE NULL COMMENT '',
  `duration` DECIMAL NULL COMMENT '',
  PRIMARY KEY (`bookreaderid`,`bookid`, `readerid`)  COMMENT '');

ALTER TABLE test.bookreaders modify duration varchar(45);

SET SQL_SAFE_UPDATES = 0;


  INSERT INTO test.bookreaders(bookreaderid,bookid,readerid,sequence,startdate,enddate,duration)
  VALUES(800001,100001,400001,1,'2016-11-28','2016-12-28',1)

  批量插入数据
  USE test;
  delimiter // -- 把界定符号改成双斜杠
  CREATE PROCEDURE BatchInsert(IN init INT, IN loop_time INT) -- 第一个参数 为初始ID号，可自己定义，第二个参数是生成多少记录
  BEGIN
    DECLARE Var INT;
    DECLARE ID INT;
    SET Var = 0;
    SET ID = init;
    WHILE Var < loop_time DO
      INSERT INTO test.books( bookid,bookname,author,version,price,location) VALUES(ID,'Queen of the Dark Chamber','Chritina Tsai','1953','10.00','Plano');
      SET ID= ID+1;
      SET Var = Var +1;
      END WHILE;
      END;

      CALL BatchInsert(100002,99);


USE test;
  delimiter // -- 把界定符号改成双斜杠
  CREATE PROCEDURE BatchInsertReaders(IN init INT, IN loop_time INT) -- 第一个参数 为初始ID号，可自己定义，第二个参数是生成多少记录
  BEGIN
    DECLARE Var INT;
    DECLARE ID INT;
    SET Var = 0;
    SET ID = init;
    WHILE Var < loop_time DO
      INSERT INTO test.readers( readerid,firstname,lastname,church,groups,email,phonenumber)
      VALUES(ID,concat('fname',ID),
      concat('Lastname_',ID）,
      'PPCO','YOUTH',
      concat(ID,'@google.com'),
      concat('1-214-123',floor(rand(ID)*10000) mod 200)));
      SET ID= ID+1;
      SET Var = Var +1;
  END WHILE;
END;




USE test;
  delimiter // -- 把界定符号改成双斜杠
  CREATE PROCEDURE BatchInsertBookReaders(IN init INT, IN loop_time INT) -- 第一个参数 为初始ID号，可自己定义，第二个参数是生成多少记录
  BEGIN
    DECLARE Var INT;
    DECLARE ID INT;
    DECLARE P1 DATE;
    SET Var = 0;
    SET ID = init;
    WHILE Var < loop_time DO
      SET @dt=concat(FLOOR(2015+(RAND()*2)),'-',lpad(FLOOR(1+(RAND()*12)),2,0),'-',LPAD(FLOOR(3+(RAND()*8)),2,0));
      SET P1=date_add(@dt,interval -14 day);

      INSERT INTO test.bookreader( bookreaderid,bookid,readerid,sequence,startdate,enddate,duration)
       VALUES(ID,ID-700000,ID-400000,2,P1,@dt,datediff(@dt,P1));
      SET ID= ID+1;
      SET Var = Var +1;
      END WHILE;
      END;


查询某书顺序：
SELECT × FROM test.bookreader where bookid =100001 group by sequence;





  CREATE TABLE `passinglight`.`books` (
  `bookid` INT NOT NULL COMMENT '',
  `bookname` VARCHAR(45) NOT NULL COMMENT '',
  `auther` VARCHAR(45) NULL COMMENT '',
  `version` VARCHAR(45) NULL COMMENT '',
  `price` VARCHAR(45) NULL COMMENT '',
  `location` VARCHAR(45) NULL COMMENT '',
  PRIMARY KEY (`bookid`)  COMMENT '');

CREATE TABLE `passinglight`.`bookreader` (
  `bookreaderid` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `bookid` INT NOT NULL COMMENT '',
  `readerid` INT NOT NULL COMMENT '',
  `sequence` INT NOT NULL COMMENT '',
  `startdate` DATE NULL COMMENT '',
  `enddate` DATE NULL COMMENT '',
  `duration` DECIMAL NULL COMMENT '',
  PRIMARY KEY (`bookreaderid`,`bookid`, `readerid`)  COMMENT '');


----------------------------------------
6/5/2017

  CREATE TABLE `passinglight`.`questions` (
  `questionid` INT NOT NULL COMMENT '',
  `questiontext` VARCHAR(200) NOT NULL COMMENT '', 
  PRIMARY KEY (`questionid`)  COMMENT '');

/*
  CREATE TABLE `passinglight`.`response` (
  `responseid` AUTO_INCREMENT=1000,
  `questionid` VARCHAR(45) NOT NULL COMMENT '',
  `readerid` VARCHAR(45) NOT NULL COMMENT '',
  `answer` VARCHAR(45) NULL COMMENT '',
  PRIMARY KEY (`questionid`,`readerid`)  COMMENT '');
  */

   CREATE TABLE `passinglight`.`response` (
  `responseid` MEDIUMINT AUTO_INCREMENT,
  `questionid` VARCHAR(45) NOT NULL COMMENT '',
  `readerid` VARCHAR(45) NOT NULL COMMENT '',
  `answer` VARCHAR(45) NULL COMMENT '',
  PRIMARY KEY (`responseid`)  COMMENT '');


6/30/2017
CREATE TABLE `passinglight`.`posts` (
  `postid` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `username` VARCHAR(64) NULL COMMENT '',
  `content` varchar(500) NULL,
  `createdAt` VARCHAR(64) NULL COMMENT '',
  `updatedAt` VARCHAR(64) NULL COMMENT '',
  `version` INT NULL COMMENT '',
  PRIMARY KEY (`postid`)  COMMENT ''
  ) ;




7/10/2017 Statistic count
 SELECT   
SUM( CASE WHEN questionid = '1001' and answer='Yes' THEN 
                      1 ELSE 0 END) as 'Yes_1001',
                       SUM( CASE WHEN questionid = '1001' and answer='No' THEN 
                      1 ELSE 0 END) as 'No_1001', 
                      
                      SUM( CASE WHEN questionid = '1002' and answer='Yes' THEN 
                      1 ELSE 0 END) as 'Yes_1002',
                       SUM( CASE WHEN questionid = '1002' and answer='No' THEN 
                      1 ELSE 0 END) as 'No_1002', 

SUM( CASE WHEN questionid = '1001' and answer='Yes' THEN 
                      1 ELSE 0 END) as 'Yes_1003',
                       SUM( CASE WHEN questionid = '1003' and answer='No' THEN 
                      1 ELSE 0 END) as 'No_1003', 


SUM( CASE WHEN questionid = '1004' and answer='Yes' THEN 
                      1 ELSE 0 END) as 'Yes_1004',
                       SUM( CASE WHEN questionid = '1004' and answer='No' THEN 
                      1 ELSE 0 END) as 'No_1004',
                     
                      SUM( CASE WHEN questionid = '1005' and answer='Yes' THEN 
                      1 ELSE 0 END) as 'Yes_1005',
                       SUM( CASE WHEN questionid = '1005' and answer='No' THEN 
                      1 ELSE 0 END) as 'No_1005', 
SUM( CASE WHEN questionid = '1001' and answer='Yes' THEN 
                      1 ELSE 0 END) as 'Yes_1006',
                       SUM( CASE WHEN questionid = '1006' and answer='No' THEN 
                      1 ELSE 0 END) as 'No_1006', 
SUM( CASE WHEN questionid = '1001' and answer='Yes' THEN 
                      1 ELSE 0 END) as 'Yes_1007',
                       SUM( CASE WHEN questionid = '1007' and answer='No' THEN 
                      1 ELSE 0 END) as 'No_1007', 
SUM( CASE WHEN questionid = '1001' and answer='Yes' THEN 
                      1 ELSE 0 END) as 'Yes_1008',
                       SUM( CASE WHEN questionid = '1008' and answer='No' THEN 
                      1 ELSE 0 END) as 'No_1008', 
SUM( CASE WHEN questionid = '1001' and answer='Yes' THEN 
                      1 ELSE 0 END) as 'Yes_1009',
                       SUM( CASE WHEN questionid = '1009' and answer='No' THEN 
                      1 ELSE 0 END) as 'No_1009' 
                  
                      
                      
FROM  test.response



7/12/2017
passinglightministry@gmail.com
Goodluck
davidueux@gmail.com

8/10/2017
SELECT b.bookid,a.username,b.sequence from test.readers AS a left join test.bookreaders as b
        ON a.readerid = b.readerid 
        
  update test.bookreaders set readerid='61005' where bookreaderid=39
  update test.bookreaders set readerid='61007' where bookreaderid=41

  Insert into test.bookreaders values(
    INSERT INTO test.bookreaders(bookid,readerid,sequence,startdate,enddate,duration)
    VALUES(100003,61032,1,'2017-06-28','2017-07-28',1)
  
     INSERT INTO test.bookreaders(bookid,readerid,sequence,startdate,enddate,duration)
   VALUES(100003,61028,2,'2017-07-28','2017-08-08',1)